<!DOCTYPE html>
<html lang="en">
	<head>
		<link rel="icon" type="image/png" href="<%= asset_path('faviconlogo.png') %>" />
		<meta charset="utf-8" />
		<title>Rocket Elevators-Residential</title>
		<meta name="description" content="" />
		<meta name="Author" content="Dorin Grigoras [www.stepofweb.com]" />

		<!-- mobile settings -->
		<meta name="viewport" content="width=device-width, maximum-scale=1, initial-scale=1, user-scalable=0" />
		<!--[if IE]><meta http-equiv='X-UA-Compatible' content='IE=edge,chrome=1'><![endif]-->

		<!-- WEB FONTS : use %7C instead of | (pipe) -->
		<link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600%7CRaleway:300,400,500,600,700%7CLato:300,400,400italic,600,700" rel="stylesheet" type="text/css" />
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-205402418-1"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'UA-205402418-1');
    </script>
	</head>

	<!--
		AVAILABLE BODY CLASSES:
		
		smoothscroll 			= create a browser smooth scroll
		enable-animation		= enable WOW animations
		bg-grey					= grey background
		grain-grey				= grey grain background
		grain-blue				= blue grain background
		grain-green				= green grain background
		grain-blue				= blue grain background
		grain-orange			= orange grain background
		grain-yellow			= yellow grain background
		
		boxed 					= boxed layout
		pattern1 ... patern11	= pattern background
		menu-vertical-hide		= hidden, open on click
		
		BACKGROUND IMAGE [together with .boxed class]
		
	-->
	<body>



		<!-- wrapper -->
		<div id="wrapper">

			<!-- 
				AVAILABLE HEADER CLASSES
				Default nav height: 96px
				.header-md 		= 70px nav height
				.header-sm 		= 60px nav height
				.b-0 		= remove bottom border (only with transparent use)
				.transparent	= transparent header
				.translucent	= translucent header
				.sticky			= sticky header
				.static			= static header
				.dark			= dark header
				.bottom			= header on bottom
				
				shadow-before-1 = shadow 1 header top
				shadow-after-1 	= shadow 1 header bottom
				shadow-before-2 = shadow 2 header top
				shadow-after-2 	= shadow 2 header bottom
				shadow-before-3 = shadow 3 header top
				shadow-after-3 	= shadow 3 header bottom
				.clearfix		= required for mobile menu, do not remove!
				Example Usage:  class="clearfix sticky header-sm transparent b-0"
			-->
			<div id="header" class="navbar-toggleable-md sticky clearfix">

				<!-- TOP NAV -->
				<header id="topNav">
					<div class="container">

						<!-- Mobile Menu Button -->
						<button class="btn btn-mobile" data-toggle="collapse" data-target=".nav-main-collapse">
							<i class="fa fa-bars"></i>
						</button>

						<!-- Logo -->
						<a class="logo float-left scrollTo" href="#top" style="background-color: #FFFFFF">
							<img src="<%= asset_path('R2.png') %>" alt="" />
						</a>

						<!-- 
							Top Nav 
							
							AVAILABLE CLASSES:
							submenu-dark = dark sub menu
						-->
						<div class="navbar-collapse collapse float-right nav-main-collapse submenu-dark">
							<nav class="nav-main">

								<!-- 
									.nav-onepage
									Required for onepage navigation links
									
									Add .external for an external link!
								-->
								<ul id="topMain" class="nav nav-pills nav-main nav-onepage">
									<li class="active"><!-- HOME -->
										<a id="home-nav" href="index">
											HOME
										</a>
									</li>
									<li><!-- SERVICES -->
										<li class="dropdown">
										<a class="dropdown-toggle" id="services-nav" href="index#services">
										  SERVICES
											</a>
										<ul class="dropdown-menu">
										  <li><a href="residential">Residential</a></li>
										  <li><a href="commercial">Commercial</a></li>
										</ul>
									</li>
									</li>
									<li><!-- PORTFOLIO -->
										<a id="portfolio-nav" href="index#PORTFOLIO">
											PORTFOLIO
										</a>
									</li>
									<li><!-- NEWS -->
										<a id="news-nav" href="index#news">
											NEWS
										</a>
									</li>

									<li><!-- CLIENTS -->
										<a id="clients-nav" href="index#clients">
											CLIENTS
										</a>
									</li>

									<li><!-- CONTACT -->
										<a id="contact-nav" href="index#contact">
											CONTACT
										</a>
									</li>
                  <li><!-- MACHINE LEARNING -->
										<a id="contact-nav" href="machineLearning">
											MACHINE LEARNING
										</a>
									</li>
									<li><!-- USERS login -->
										<a id="login-nav" href="/admin">
											SIGN IN
										</a>
									</li>
								</ul>

							</nav>
						</div>

					</div>
				</header>
				<!-- /Top Nav -->

			</div>
			<!-- /PAGE HEADER -->
      <div>
        <body style="font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; font-size:13px;">
          <div id="warning">
            <h1 style="font-weight:500;">Speech Recognition Speech SDK not found (microsoft.cognitiveservices.speech.sdk.bundle.js missing).</h1>
          </div>
          
          <div id="content" style="display: block ;">
            <table width="100%">
              <tr>
                <td></td>
                <td><h1 style="font-weight:500;">Speech Recognition</h1></td>
              </tr>
              <tr>
                <td align="right"><a href="https://docs.microsoft.com/azure/cognitive-services/speech-service/get-started" target="_blank">Subscription</a>:</td>
                <td><input id="subscriptionKey" type="text" size="40" value=""></td>
              </tr>
              <tr>
                <td align="right">Region</td>
                <td><input id="serviceRegion" type="text" size="40" value="westus"></td>
              </tr>
              <tr>
                <td align="right">Enrollment File</td>
                <td>
                  <input type="file" id="filePicker" accept=".wav" />
                </td>
              </tr>
              <tr>
                <td align="right">Test Identification File</td>
                <td>
                  <input type="file" id="testFilePicker" accept=".wav" />
                </td>
              </tr>
              <tr>
                <td></td>
                <td><button id="createVoiceProfileButton">Create Voice Profile</button></td>
              </tr>
              <tr>
                <td></td>
                <td><button id="identifySpeakerButton">Identify Speaker</button></td>
              </tr>
              <tr>
                <td></td>
                <td><button id="deleteProfileButton">Delete Voice Profile</button></td>
              </tr>
              <tr>
                <td align="right" valign="top">Result</td>
                <td><textarea id="resultDiv" style="display: inline-block;width:500px;height:200px"></textarea></td>
              </tr>
            </table>
      </div>

			<!-- FOOTER -->
			<footer id="footer">
				<div class="container">


					<div class="row">

						<!-- col #1 -->
						<div class="col-md-8">

							<h3 class="letter-spacing-1">WHY US?</h3>

							<!-- Small Description -->
							<p>
							We have the conviction that we create the most innovative and reliable products on the market. Contact us today for any questions you might have.

							</p>
							<h2>(418) 555-1234</h2>
						</div>
						<!-- /col #1 -->

						
					</div>


				</div>

				<div class="copyright">
					<div class="container">
						<ul class="float-right m-0 list-inline mobile-block">
							<li>Terms &amp; Conditions</li>
							<li>&bull;</li>
							<li>Privacy</li>
						</ul>
						&copy; All Rights Reserved, Rocket Elevators
					</div>
				</div>

			</footer>
			<!-- /FOOTER -->
		</div>
		<!-- /wrapper -->


		<!-- SCROLL TO TOP -->
		<a href="#" id="toTop"></a>

		<!-- JAVASCRIPT FILES -->
		<script>var plugin_path = 'assets/plugins/';
    
      // status fields and start button in UI
    var resultDiv;
    var createVoiceProfileButton;
    var identifySpeakerButton;
    var deleteProfileButton;

    // subscription key and region for speech services.
    var subscriptionKey, serviceRegion;
    var authorizationToken;
    var SpeechSDK;
    var client;
    var filePicker, testFilePicker,audioFiles, testFile;
    var speechConfig, profile;

    document.addEventListener("DOMContentLoaded", function () {

      createVoiceProfileButton = document.getElementById("createVoiceProfileButton");
      identifySpeakerButton = document.getElementById("identifySpeakerButton");
      deleteProfileButton = document.getElementById("deleteProfileButton");
      subscriptionKey = document.getElementById("subscriptionKey");
      serviceRegion = document.getElementById("serviceRegion");
      resultDiv = document.getElementById("resultDiv");
      filePicker = document.getElementById("filePicker");
      testFilePicker = document.getElementById("testFilePicker");
      
      deleteProfileButton.disabled = true;
      identifySpeakerButton.disabled = false;
      filePicker.addEventListener("change", function () {
          audioFiles = filePicker.files;
      });

      testFilePicker.addEventListener("change", function () {
          testFile = testFilePicker.files[0];
      });

      createVoiceProfileButton.addEventListener("click", function () {

        createVoiceProfileButton.disabled = true;
        resultDiv.innerHTML = "";

        // if we got an authorization token, use the token. Otherwise use the provided subscription key
        if (authorizationToken) {
          speechConfig = SpeechSDK.SpeechConfig.fromAuthorizationToken(authorizationToken, serviceRegion.value);
        } else {
          if (subscriptionKey.value === "" || subscriptionKey.value === "subscription") {
            alert("Please enter your Microsoft Cognitive Services Speech subscription key!");
            createVoiceProfileButton.disabled = false;
            return;
          }
          speechConfig = SpeechSDK.SpeechConfig.fromSubscription(subscriptionKey.value, serviceRegion.value);
        }

        speechConfig.setProperty(SpeechSDK.PropertyId.SpeechServiceConnection_TranslationVoice, "en-US");
        client = new SpeechSDK.VoiceProfileClient(speechConfig);

        client.createProfileAsync(
          SpeechSDK.VoiceProfileType.TextIndependentIdentification,
          "en-us",
          function (result) {
            profile = result;
            window.console.log(result);
            
            resultDiv.innerHTML += "Profile created ProfileId: " + result.profileId;
            resultDiv.innerHTML += "\r\n"; 
            deleteProfileButton.disabled = false;
            
            let audioConfig = SpeechSDK.AudioConfig.fromWavFileInput(audioFiles[0]);

            client.enrollProfileAsync(
              profile, 
              audioConfig,
              function(result) {
                resultDiv.innerHTML += "(Enrollment result) Reason: " + SpeechSDK.ResultReason[result.reason]; 
                resultDiv.innerHTML += "\r\n"; 
                window.console.log(result);
                identifySpeakerButton.disabled = false;
              },
              function(err) {
                window.console.log(err);
                resultDiv.innerHTML += "ERROR: " + err; 
              });
            resultDiv.innerHTML += "\r\n"; 

            createVoiceProfileButton.disabled = false;
          },
          function (err) {
            window.console.log(err);
            resultDiv.innerHTML += "ERROR: " + err; 

            createVoiceProfileButton.disabled = false;
          });
      });

      identifySpeakerButton.addEventListener("click", function () {
        let testAudioConfig = SpeechSDK.AudioConfig.fromWavFileInput(testFile);
        let recognizer = new SpeechSDK.SpeakerRecognizer(speechConfig, testAudioConfig);
        let model = SpeechSDK.SpeakerIdentificationModel.fromProfiles([profile]);
        recognizer.recognizeOnceAsync(
          model,
          function(result) {
            window.console.log(result);
            let reason = result.reason; 
            resultDiv.innerHTML += "(Identification result) Reason: " + SpeechSDK.ResultReason[reason]; 
            resultDiv.innerHTML += "\n"; 
            if( reason === SpeechSDK.ResultReason.Canceled ) {
              let cancellationDetails = SpeechSDK.SpeakerRecognitionCancellationDetails.fromResult(result);
              resultDiv.innerHTML += "(Identification canceled) Error Details: " + cancellationDetails.errorDetails;
              resultDiv.innerHTML += "\n"; 
              resultDiv.innerHTML += "(Identification canceled) Error Code: " + cancellationDetails.errorCode;
              resultDiv.innerHTML += "\n"; 
            } else {
              resultDiv.innerHTML += "(Identification result) Profile Id: " + result.profileId; 
              resultDiv.innerHTML += "\n"; 
              resultDiv.innerHTML += "(Identification result) Score: " + result.score; 
              resultDiv.innerHTML += "\r\n"; 
            }
          },
          function(err) {
            window.console.log(err);
            resultDiv.innerHTML += "ERROR: " + err; 
          });
      });

      deleteProfileButton.addEventListener("click", function () {
          client.deleteProfileAsync(
            profile,
            function(result) {
              resultDiv.innerHTML += "(Delete profile result) Reason: " + SpeechSDK.ResultReason[result.reason]; 
              resultDiv.innerHTML += "\r\n"; 
              deleteProfileButton.disabled = true;
              identifySpeakerButton.disabled = true;
            },
            function(err) {
              window.console.log(err);
              resultDiv.innerHTML += "ERROR: " + err; 
            }
          );
      });
      if (!!window.SpeechSDK) {
        SpeechSDK = window.SpeechSDK;
        createVoiceProfileButton.disabled = false;

        document.getElementById('content').style.display = 'block';
        document.getElementById('warning').style.display = 'none';

        // in case we have a function for getting an authorization token, call it.
        if (typeof RequestAuthorizationToken === "function") {
            RequestAuthorizationToken();
        }
      }
    });
    
      async function SpeakerVerify(profile, recognizer)
    {
      const model = sdk.SpeakerVerificationModel.fromProfile(profile);
      const result = await new Promise ((resolve, reject) => {
          recognizer.recognizeOnceAsync (model, result => { resolve(result); }, error => { reject(error); });
      });
      console.log ("Verified voice profile for speaker: " + result.profileId + ". Score is: " + result.score + ".\n");
    }

        async function AddEnrollmentsToTextDependentProfile(client, profile, audio_files)
    {
        for (var i = 0; i < audio_files.length; i++) {
            console.log ("Adding enrollment to text dependent profile...");
            const audio_config = GetAudioConfigFromFile (audio_files[i]);
            const result = await new Promise ((resolve, reject) => {
                client.enrollProfileAsync (profile, audio_config, result => { resolve(result); }, error => { reject(error); });
            });
            if (result.reason === sdk.ResultReason.Canceled) {
                throw(JSON.stringify(sdk.VoiceProfileEnrollmentCancellationDetails.fromResult(result)));
            }
            else {
                console.log ("Remaining enrollments needed: " + result.privDetails["remainingEnrollmentsCount"] + ".");
            }
        };
        console.log ("Enrollment completed.\n");
    }
    </script>

    <%= javascript_include_tag 'microsoft.cognitiveservices.speech.sdk.bundle.js' %>

    <script>
      var authorizationEndpoint = "token.php";

      function RequestAuthorizationToken() {
      if (authorizationEndpoint) {
        var a = new XMLHttpRequest();
        a.open("GET", authorizationEndpoint);
        a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        a.send("");
        a.onload = function() {
            var token = JSON.parse(atob(this.responseText.split(".")[1]));
            serviceRegion.value = token.region;
            authorizationToken = this.responseText;
            subscriptionKey.disabled = true;
            subscriptionKey.value = "using authorization token (hit F5 to refresh)";
            console.log("Got an authorization token: " + token);
          }
        }
      }
    </script>
  </body>
</html>